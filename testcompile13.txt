% The 13 printing test
% As I develop the compiler I use the new features
% to print 13 in increasingly complex ways...

% test string length.

%test records and multi-dimensional arrays
var rec,otherRec : record
            mat : array 1..2 of array 1..2 of boolean
            hovering : real
          end record

rec.mat(1)(2) := true

var bob := length("123456")

% test complex type returns
fcn RetPrintingStr () : string
    result "PRIN" + "TING "
end RetPrintingStr

var assignStr : string
assignStr := RetPrintingStr()

%test no parenthesis procedures
procedure SetHovering
    rec.hovering := 0.1 * 3 / 3 + 0.9
end SetHovering
SetHovering

% test modules
module Print13

    %test equality checking and code inside a module
    if bob = 6 and 9 ~= 7 and "bob" = "bob" and "lol" ~= "hi" and rec.hovering = 1 and rec.mat(1)(2) then
        %test no newline
        put assignStr ..
        %test multi-expr
        put 13,"..."
    end if
    
    % test module variables
    var lolArr,lolArr2 : array 1..13 of int

    fcn CalcStuff(num1 : int, num2 : int) : int
        result num1 - num2**2
    end CalcStuff

    proc PutStuff(num : int)
        var bob : int := 2**num

        bob := CalcStuff(bob,2)
        bob div= 2

        if bob > 14 then
            return
        end if

        var ed := bob - 1    
        put ed
        return
        put 9
    end PutStuff
end Print13

fcn Second( arr : array 1..2 of int ) : int
    result arr(2)
end Second

for i : 1..upper(Print13.lolArr)
    Print13.lolArr(i) := i
end for
% lolArr = 1,2,3,4...


loop
    Print13.lolArr(2) += 1
    exit when Print13.lolArr(2) >= 4
end loop


% test implicit copy of arrays and records
Print13.lolArr2 := Print13.lolArr
otherRec := rec

%check record copy
if rec.hovering ~= otherRec.hovering or rec.mat ~= otherRec.mat then
    put rec.hovering, " is not equal to ", otherRec.hovering, " after copy."
end if


% set bob to 5
bob := Print13.lolArr2(9) - Second(Print13.lolArr2)

if bob <= 5 or bob > 7 then
    var ed := 6
    Print13.PutStuff (ed) % this one returns early and never prints
    Print13.PutStuff (bob)
elsif 5 >= 5 and 6 div 2 < 3 then
    put 6
else
    put 5 >= 4
end if